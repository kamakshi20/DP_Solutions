Recursion : 

class Solution {

    int func(int[] nums, int ind){
        if(ind == 0)    return nums[0];
        if(ind < 0)     return 0;

        int pick = nums[ind] + func(nums, ind - 2);
        int not_pick = 0 + func(nums, ind - 1);

        return Math.max(pick, not_pick);
    }
    public int rob(int[] nums) {
        
        return func(nums, nums.length - 1);
    }
}




DP: 


class Solution {

    int func(int[] dp, int[] nums, int ind){
        if(ind == 0)    return nums[0];
        if(ind < 0)     return 0;
        
        if(dp[ind] != -1)   return dp[ind];
        
        int pick = nums[ind] + func(dp, nums, ind - 2);
        int not_pick = 0 + func(dp, nums, ind - 1);

        return dp[ind] = Math.max(pick, not_pick);
    }
    public int rob(int[] nums) {
        
        int[] dp = new int[nums.length];
        Arrays.fill(dp, -1);
        return func(dp, nums, nums.length - 1);
    }
}
